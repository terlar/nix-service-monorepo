#+TITLE: nix-service-monorepo

Service monorepo managed with Nix (Playground)

* Research
** Application
- [[https://github.com/gothinkster/realworld][GitHub - gothinkster/realworld: "The mother of all demo apps" ‚Äî Exemplary ful...]]
** Nix
- [[https://github.com/styx-static/styx/tree/master/tests][styx/tests at master ¬∑ styx-static/styx ¬∑ GitHub]]
- [[https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-nix][dhall-haskell/dhall-nix at master ¬∑ dhall-lang/dhall-haskell ¬∑ GitHub]]
- [[https://github.com/numtide/devshell][GitHub - numtide/devshell: Per project developer environments]]
- [[https://github.com/nix-community/nixago][GitHub - nix-community/nixago: Generate configuration files using Nix {mainta...]]
- [[https://github.com/nix-community/nixpkgs-terraform-providers-bin][GitHub - nix-community/nixpkgs-terraform-providers-bin: auto-updating terrafo...]]
- [[https://github.com/zhaofengli/attic][GitHub - zhaofengli/attic: Multi-tenant Nix Binary Cache]]
- [[https://github.com/lf-/nix-otel][GitHub - lf-/nix-otel: Nix OpenTelemetry sender plugin]]
** Terraform
- [[https://medium.com/@anton.babenko/make-terraform-faster-skip-unnecessary-checks-aws-and-s3-3ab00df9c3a9][Make Terraform faster ‚Äî skip unnecessary checks (AWS and S3) | by Anton Baben...]]
- [[https://coderbook.com/@marcus/prevent-terraform-from-recreating-or-deleting-resource/][Prevent Terraform from Recreating or Deleting Resource ¬∑ Coderbook]]
- [[https://www.hibri.net/2017/11/13/terraform-for-grownups/][Terraform for grownups - A model for scaling Terraform workflow in a large or...]]
- [[https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html][Index - Terraform Recommended Practices - Terraform by HashiCorp]]
- [[https://github.com/terraform-aws-modules][Terraform AWS modules ¬∑ GitHub]]
- [[https://docs.spacelift.io/][Hello, Spacelift! - Spacelift]]
- [[https://terraform-docs.io/][terraform-docs]]
- [[https://www.logicloud.tech/articles/terraform/aws-lambda]]
- [[https://github.com/Mastercard/terraform-provider-restapi][GitHub - Mastercard/terraform-provider-restapi: A terraform provider to manag...]]
** Testing
- [[https://github.com/Orange-OpenSource/hurl][GitHub - Orange-OpenSource/hurl: Hurl, run and test HTTP requests.]]
- [[https://en.wikipedia.org/wiki/Software_testing][Software testing - Wikipedia]]
- [[https://github.com/Qovery/replibyte][GitHub - Qovery/replibyte: Seed your development database with real data ‚ö°Ô∏è]]
** OpenAPI
- [[https://swagger.io/specification/][OpenAPI Specification - Version 3.0.3 | Swagger]]
** GitHub Actions
** Methodology
- [[https://12factor.net/][The Twelve-Factor App]]
** Development
- [[https://github.com/siderolabs/conform][GitHub - siderolabs/conform: Policy enforcement for your pipelines.]]
** VCS
- [[https://github.com/conventional-changelog/commitlint/][GitHub - conventional-changelog/commitlint: üìì Lint commit messages]]
- [[https://github.com/conventional-changelog/conventional-changelog][GitHub - conventional-changelog/conventional-changelog: Generate changelogs a...]]
- [[https://github.com/commitizen/cz-cli][GitHub - commitizen/cz-cli: The commitizen command line utility. #BlackLivesM...]]
- [[https://github.com/semantic-release/semantic-release][GitHub - semantic-release/semantic-release: Fully automated version managemen...]]
- [[https://github.com/choffmeister/git-describe-semver][GitHub - choffmeister/git-describe-semver]]
- [[https://github.com/compilerla/conventional-pre-commit][GitHub - compilerla/conventional-pre-commit: A pre-commit hook that checks co...]]
- [[https://github.com/cocogitto/cocogitto][GitHub - cocogitto/cocogitto: The Conventional Commits toolbox]]
- [[https://github.com/convco/convco][GitHub - convco/convco: Conventional commits, changelog, versioning, validation]]
** Monorepo
- [[https://monorepo.tools/][Monorepo Explained]]

* Guidelines
** Derivations
- Keep small and isolated
** Components
- A small isolated "deployable" unit (a datastore, a delivery mechanism, an API GW, a set
  of lambda functions)
- Self-contained
- Loose connection to other dependencies (components)
- 12 factor app
** Services
- Built up from several different components.

* DSL
Nix module system to easier extend parts

* Topology
system and subsystem instead of service and component?

- Cell :: A group of related services in a specific region/stage.
- Service :: A service provides a solution for a particular need. The service itself is
  mostly a concept and is the sum of its components. Interaction with the service is done
  via one of its components.
- Component :: A small isolated part of a service. It could be some infrastructure serving
  a specific purpose or an application. This is in order to limit the scope of deployments
  and support incremental updates without big risk/impact, multiple components work
  together. Support of minimal branch deployments. Not deploying all the infrastructure,
  but only the pieces a developer touches.

  For example:
  - A data store for an entity
  - An HTTP API for an entity
  - An event-mechanism or message delivery

  A component includes configuration for which regions/stages are supported.
- Stack :: Deployment of a component to a specific region and stage (eu-west-1 production)
- Command :: A command to be executed on a stack
  - plan
  - deploy
